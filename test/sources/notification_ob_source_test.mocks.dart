// Mocks generated by Mockito 5.4.6 from annotations
// in recall/test/sources/notification_ob_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:objectbox/objectbox.dart' as _i4;
import 'package:objectbox/src/native/query/query.dart' as _i3;
import 'package:recall/models/notification.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotification_0 extends _i1.SmartFake implements _i2.Notification {
  _FakeNotification_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_1<T> extends _i1.SmartFake
    implements _i3.QueryBuilder<T> {
  _FakeQueryBuilder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePropertyQuery_2<T> extends _i1.SmartFake
    implements _i3.PropertyQuery<T> {
  _FakePropertyQuery_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox extends _i1.Mock implements _i4.Box<_i2.Notification> {
  @override
  int put(
    _i2.Notification? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.Future<int> putAsync(
    _i2.Notification? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i2.Notification> putAndGetAsync(
    _i2.Notification? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i5.Future<_i2.Notification>.value(_FakeNotification_0(
          this,
          Invocation.method(
            #putAndGetAsync,
            [object],
            {#mode: mode},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Notification>.value(_FakeNotification_0(
          this,
          Invocation.method(
            #putAndGetAsync,
            [object],
            {#mode: mode},
          ),
        )),
      ) as _i5.Future<_i2.Notification>);

  @override
  _i5.Future<int> putQueuedAwaitResult(
    _i2.Notification? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueuedAwaitResult,
          [object],
          {#mode: mode},
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  int putQueued(
    _i2.Notification? object, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueued,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<int> putMany(
    List<_i2.Notification>? objects, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [objects],
          {#mode: mode},
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  _i5.Future<List<int>> putManyAsync(
    List<_i2.Notification>? objects, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);

  @override
  _i5.Future<List<_i2.Notification>> putAndGetManyAsync(
    List<_i2.Notification>? objects, {
    _i4.PutMode? mode = _i4.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i5.Future<List<_i2.Notification>>);

  @override
  _i2.Notification? get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i2.Notification?);

  @override
  _i5.Future<_i2.Notification?> getAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAsync,
          [id],
        ),
        returnValue: _i5.Future<_i2.Notification?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.Notification?>.value(),
      ) as _i5.Future<_i2.Notification?>);

  @override
  List<_i2.Notification?> getMany(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMany,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: <_i2.Notification?>[],
        returnValueForMissingStub: <_i2.Notification?>[],
      ) as List<_i2.Notification?>);

  @override
  _i5.Future<List<_i2.Notification?>> getManyAsync(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyAsync,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue:
            _i5.Future<List<_i2.Notification?>>.value(<_i2.Notification?>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Notification?>>.value(<_i2.Notification?>[]),
      ) as _i5.Future<List<_i2.Notification?>>);

  @override
  List<_i2.Notification> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i2.Notification>[],
        returnValueForMissingStub: <_i2.Notification>[],
      ) as List<_i2.Notification>);

  @override
  _i5.Future<List<_i2.Notification>> getAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #getAllAsync,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i5.Future<List<_i2.Notification>>);

  @override
  _i3.QueryBuilder<_i2.Notification> query(
          [_i3.Condition<_i2.Notification>? qc]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [qc],
        ),
        returnValue: _FakeQueryBuilder_1<_i2.Notification>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
        returnValueForMissingStub: _FakeQueryBuilder_1<_i2.Notification>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
      ) as _i3.QueryBuilder<_i2.Notification>);

  @override
  int count({int? limit = 0}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#limit: limit},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool isEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isEmpty,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool contains(int? id) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool containsMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #containsMany,
          [ids],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<bool> removeAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  int removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.Future<int> removeManyAsync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeManyAsync,
          [ids],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  int removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.Future<int> removeAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAllAsync,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuery extends _i1.Mock implements _i3.Query<_i2.Notification> {
  @override
  int get entityId => (super.noSuchMethod(
        Invocation.getter(#entityId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set offset(int? offset) => super.noSuchMethod(
        Invocation.setter(
          #offset,
          offset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limit(int? limit) => super.noSuchMethod(
        Invocation.setter(
          #limit,
          limit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.Future<int> removeAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.Notification?> findFirstAsync() => (super.noSuchMethod(
        Invocation.method(
          #findFirstAsync,
          [],
        ),
        returnValue: _i5.Future<_i2.Notification?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.Notification?>.value(),
      ) as _i5.Future<_i2.Notification?>);

  @override
  _i5.Future<_i2.Notification?> findUniqueAsync() => (super.noSuchMethod(
        Invocation.method(
          #findUniqueAsync,
          [],
        ),
        returnValue: _i5.Future<_i2.Notification?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.Notification?>.value(),
      ) as _i5.Future<_i2.Notification?>);

  @override
  List<int> findIds() => (super.noSuchMethod(
        Invocation.method(
          #findIds,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  _i5.Future<List<int>> findIdsAsync() => (super.noSuchMethod(
        Invocation.method(
          #findIdsAsync,
          [],
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);

  @override
  List<_i2.Notification> find() => (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
        ),
        returnValue: <_i2.Notification>[],
        returnValueForMissingStub: <_i2.Notification>[],
      ) as List<_i2.Notification>);

  @override
  _i5.Future<List<_i2.Notification>> findAsync() => (super.noSuchMethod(
        Invocation.method(
          #findAsync,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i5.Future<List<_i2.Notification>>);

  @override
  List<_i4.IdWithScore> findIdsWithScores() => (super.noSuchMethod(
        Invocation.method(
          #findIdsWithScores,
          [],
        ),
        returnValue: <_i4.IdWithScore>[],
        returnValueForMissingStub: <_i4.IdWithScore>[],
      ) as List<_i4.IdWithScore>);

  @override
  _i5.Future<List<_i4.IdWithScore>> findIdsWithScoresAsync() =>
      (super.noSuchMethod(
        Invocation.method(
          #findIdsWithScoresAsync,
          [],
        ),
        returnValue:
            _i5.Future<List<_i4.IdWithScore>>.value(<_i4.IdWithScore>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i4.IdWithScore>>.value(<_i4.IdWithScore>[]),
      ) as _i5.Future<List<_i4.IdWithScore>>);

  @override
  List<_i4.ObjectWithScore<_i2.Notification>> findWithScores() =>
      (super.noSuchMethod(
        Invocation.method(
          #findWithScores,
          [],
        ),
        returnValue: <_i4.ObjectWithScore<_i2.Notification>>[],
        returnValueForMissingStub: <_i4.ObjectWithScore<_i2.Notification>>[],
      ) as List<_i4.ObjectWithScore<_i2.Notification>>);

  @override
  _i5.Future<List<_i4.ObjectWithScore<_i2.Notification>>>
      findWithScoresAsync() => (super.noSuchMethod(
            Invocation.method(
              #findWithScoresAsync,
              [],
            ),
            returnValue:
                _i5.Future<List<_i4.ObjectWithScore<_i2.Notification>>>.value(
                    <_i4.ObjectWithScore<_i2.Notification>>[]),
            returnValueForMissingStub:
                _i5.Future<List<_i4.ObjectWithScore<_i2.Notification>>>.value(
                    <_i4.ObjectWithScore<_i2.Notification>>[]),
          ) as _i5.Future<List<_i4.ObjectWithScore<_i2.Notification>>>);

  @override
  _i5.Stream<_i2.Notification> stream() => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
        ),
        returnValue: _i5.Stream<_i2.Notification>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.Notification>.empty(),
      ) as _i5.Stream<_i2.Notification>);

  @override
  String describe() => (super.noSuchMethod(
        Invocation.method(
          #describe,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describe,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describe,
            [],
          ),
        ),
      ) as String);

  @override
  String describeParameters() => (super.noSuchMethod(
        Invocation.method(
          #describeParameters,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describeParameters,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describeParameters,
            [],
          ),
        ),
      ) as String);

  @override
  _i3.PropertyQuery<DartType> property<DartType>(
          _i3.QueryProperty<_i2.Notification, DartType>? prop) =>
      (super.noSuchMethod(
        Invocation.method(
          #property,
          [prop],
        ),
        returnValue: _FakePropertyQuery_2<DartType>(
          this,
          Invocation.method(
            #property,
            [prop],
          ),
        ),
        returnValueForMissingStub: _FakePropertyQuery_2<DartType>(
          this,
          Invocation.method(
            #property,
            [prop],
          ),
        ),
      ) as _i3.PropertyQuery<DartType>);
}
