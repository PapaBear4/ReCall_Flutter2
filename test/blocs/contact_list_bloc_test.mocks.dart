// Mocks generated by Mockito 5.4.4 from annotations
// in recall/test/blocs/contact_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recall/models/contact.dart' as _i2;
import 'package:recall/repositories/contact_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContact_0 extends _i1.SmartFake implements _i2.Contact {
  _FakeContact_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContactRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactRepository extends _i1.Mock implements _i3.ContactRepository {
  MockContactRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Contact>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Contact>>.value(<_i2.Contact>[]),
      ) as _i4.Future<List<_i2.Contact>>);

  @override
  _i4.Future<_i2.Contact?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Contact?>.value(),
      ) as _i4.Future<_i2.Contact?>);

  @override
  _i4.Future<_i2.Contact> add(_i2.Contact? item) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [item],
        ),
        returnValue: _i4.Future<_i2.Contact>.value(_FakeContact_0(
          this,
          Invocation.method(
            #add,
            [item],
          ),
        )),
      ) as _i4.Future<_i2.Contact>);

  @override
  _i4.Future<void> update(_i2.Contact? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
