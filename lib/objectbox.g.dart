// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/contact.dart';
import 'models/notifications.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1793994460556925285),
      name: 'Contact',
      lastPropertyId: const obx_int.IdUid(7, 3683856921556564968),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 90881113209169037),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2697999848323947938),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8457285260018957115),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8989760233651442574),
            name: 'birthday',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3038223345535722784),
            name: 'lastContacted',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3683856921556564968),
            name: 'frequency',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2749572804835222325),
      name: 'LocalNotification',
      lastPropertyId: const obx_int.IdUid(4, 2806820761536295816),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1416556743326320138),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7208200269652364215),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 533581488617311789),
            name: 'body',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2806820761536295816),
            name: 'payload',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 7933436140937691858),
      name: 'NotificationSettings',
      lastPropertyId: const obx_int.IdUid(3, 5889096991651133988),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2658647324382796442),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1934801791299021307),
            name: 'remindersEnabled',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5889096991651133988),
            name: 'alertsEnabled',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 7933436140937691858),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [8247498634308133081, 2634096001833180392],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4061204890486791768,
        6672052618592022636,
        6270410026251466131,
        6627571402661596428,
        7495078353359120746,
        6378050531637723082,
        8983563127203851064,
        1221545482435965096,
        4598591865702810457,
        3675048193406020147,
        203930266618559799
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Contact: obx_int.EntityDefinition<Contact>(
        model: _entities[0],
        toOneRelations: (Contact object) => [],
        toManyRelations: (Contact object) => {},
        getId: (Contact object) => object.id,
        setId: (Contact object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Contact.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Contact object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final frequencyOffset = fbb.writeString(object.frequency);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addInt64(3, object.birthday?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastContacted?.millisecondsSinceEpoch);
          fbb.addOffset(6, frequencyOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final birthdayValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final lastContactedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final frequencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final birthdayParam = birthdayValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(birthdayValue);
          final lastContactedParam = lastContactedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastContactedValue);
          final object = Contact(
              id: idParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              frequency: frequencyParam,
              birthday: birthdayParam,
              lastContacted: lastContactedParam);

          return object;
        }),
    LocalNotification: obx_int.EntityDefinition<LocalNotification>(
        model: _entities[1],
        toOneRelations: (LocalNotification object) => [],
        toManyRelations: (LocalNotification object) => {},
        getId: (LocalNotification object) => object.id,
        setId: (LocalNotification object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field LocalNotification.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (LocalNotification object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          final payloadOffset =
              object.payload == null ? null : fbb.writeString(object.payload!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, bodyOffset);
          fbb.addOffset(3, payloadOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final payloadParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = LocalNotification(
              id: idParam,
              title: titleParam,
              body: bodyParam,
              payload: payloadParam);

          return object;
        }),
    NotificationSettings: obx_int.EntityDefinition<NotificationSettings>(
        model: _entities[2],
        toOneRelations: (NotificationSettings object) => [],
        toManyRelations: (NotificationSettings object) => {},
        getId: (NotificationSettings object) => object.id,
        setId: (NotificationSettings object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field NotificationSettings.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (NotificationSettings object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addBool(1, object.remindersEnabled);
          fbb.addBool(2, object.alertsEnabled);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final remindersEnabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final alertsEnabledParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = NotificationSettings(
              id: idParam,
              remindersEnabled: remindersEnabledParam,
              alertsEnabled: alertsEnabledParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id =
      obx.QueryIntegerProperty<Contact>(_entities[0].properties[0]);

  /// See [Contact.firstName].
  static final firstName =
      obx.QueryStringProperty<Contact>(_entities[0].properties[1]);

  /// See [Contact.lastName].
  static final lastName =
      obx.QueryStringProperty<Contact>(_entities[0].properties[2]);

  /// See [Contact.birthday].
  static final birthday =
      obx.QueryDateProperty<Contact>(_entities[0].properties[3]);

  /// See [Contact.lastContacted].
  static final lastContacted =
      obx.QueryDateProperty<Contact>(_entities[0].properties[4]);

  /// See [Contact.frequency].
  static final frequency =
      obx.QueryStringProperty<Contact>(_entities[0].properties[5]);
}

/// [LocalNotification] entity fields to define ObjectBox queries.
class LocalNotification_ {
  /// See [LocalNotification.id].
  static final id =
      obx.QueryIntegerProperty<LocalNotification>(_entities[1].properties[0]);

  /// See [LocalNotification.title].
  static final title =
      obx.QueryStringProperty<LocalNotification>(_entities[1].properties[1]);

  /// See [LocalNotification.body].
  static final body =
      obx.QueryStringProperty<LocalNotification>(_entities[1].properties[2]);

  /// See [LocalNotification.payload].
  static final payload =
      obx.QueryStringProperty<LocalNotification>(_entities[1].properties[3]);
}

/// [NotificationSettings] entity fields to define ObjectBox queries.
class NotificationSettings_ {
  /// See [NotificationSettings.id].
  static final id = obx.QueryIntegerProperty<NotificationSettings>(
      _entities[2].properties[0]);

  /// See [NotificationSettings.remindersEnabled].
  static final remindersEnabled =
      obx.QueryBooleanProperty<NotificationSettings>(
          _entities[2].properties[1]);

  /// See [NotificationSettings.alertsEnabled].
  static final alertsEnabled = obx.QueryBooleanProperty<NotificationSettings>(
      _entities[2].properties[2]);
}
