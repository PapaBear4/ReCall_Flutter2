// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/contact.dart';
import 'models/notification.dart';
import 'models/usersettings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 9023869447329200960),
    name: 'Contact',
    lastPropertyId: const obx_int.IdUid(17, 5555504640993603936),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1675281519582122376),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4578521686525613939),
        name: 'firstName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2691509830060103224),
        name: 'lastName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1098571936091281280),
        name: 'nickname',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7964066526837520735),
        name: 'frequency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7526879239115018251),
        name: 'birthday',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6675415758010721626),
        name: 'lastContacted',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1576000135475674592),
        name: 'anniversary',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 9147962101984827812),
        name: 'phoneNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 8361093919788494836),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 7068813924720646580),
        name: 'youtubeUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 4038145699093095777),
        name: 'instagramHandle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 9033667966281675051),
        name: 'facebookUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 6902321250746057037),
        name: 'snapchatHandle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6116553155793466790),
        name: 'xHandle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 3133082328778885275),
        name: 'linkedInUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 5555504640993603936),
        name: 'emails',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3617810349953416850),
    name: 'Notification',
    lastPropertyId: const obx_int.IdUid(5, 3360340969330163060),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8610330499649681052),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5341223573231365197),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 748669569479386633),
        name: 'body',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1860028004712547145),
        name: 'payload',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3360340969330163060),
        name: 'scheduledTime',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7616040758953516209),
    name: 'UserSettings',
    lastPropertyId: const obx_int.IdUid(6, 4721514900881730992),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6761454180921128856),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3363059382382861741),
        name: 'remindersEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8752468135951795440),
        name: 'alertsEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6825165308826136998),
        name: 'notificationHour',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7624390682773250372),
        name: 'notificationMinute',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4721514900881730992),
        name: 'defaultFrequency',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 7616040758953516209),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Contact: obx_int.EntityDefinition<Contact>(
      model: _entities[0],
      toOneRelations: (Contact object) => [],
      toManyRelations: (Contact object) => {},
      getId: (Contact object) => object.id,
      setId: (Contact object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field Contact.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (Contact object, fb.Builder fbb) {
        final firstNameOffset = fbb.writeString(object.firstName);
        final lastNameOffset = fbb.writeString(object.lastName);
        final nicknameOffset =
            object.nickname == null ? null : fbb.writeString(object.nickname!);
        final frequencyOffset = fbb.writeString(object.frequency);
        final phoneNumberOffset =
            object.phoneNumber == null
                ? null
                : fbb.writeString(object.phoneNumber!);
        final notesOffset =
            object.notes == null ? null : fbb.writeString(object.notes!);
        final youtubeUrlOffset =
            object.youtubeUrl == null
                ? null
                : fbb.writeString(object.youtubeUrl!);
        final instagramHandleOffset =
            object.instagramHandle == null
                ? null
                : fbb.writeString(object.instagramHandle!);
        final facebookUrlOffset =
            object.facebookUrl == null
                ? null
                : fbb.writeString(object.facebookUrl!);
        final snapchatHandleOffset =
            object.snapchatHandle == null
                ? null
                : fbb.writeString(object.snapchatHandle!);
        final xHandleOffset =
            object.xHandle == null ? null : fbb.writeString(object.xHandle!);
        final linkedInUrlOffset =
            object.linkedInUrl == null
                ? null
                : fbb.writeString(object.linkedInUrl!);
        final emailsOffset =
            object.emails == null
                ? null
                : fbb.writeList(
                  object.emails!.map(fbb.writeString).toList(growable: false),
                );
        fbb.startTable(18);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, firstNameOffset);
        fbb.addOffset(2, lastNameOffset);
        fbb.addOffset(3, nicknameOffset);
        fbb.addOffset(4, frequencyOffset);
        fbb.addInt64(5, object.birthday?.millisecondsSinceEpoch);
        fbb.addInt64(6, object.lastContacted?.millisecondsSinceEpoch);
        fbb.addInt64(7, object.anniversary?.millisecondsSinceEpoch);
        fbb.addOffset(8, phoneNumberOffset);
        fbb.addOffset(9, notesOffset);
        fbb.addOffset(10, youtubeUrlOffset);
        fbb.addOffset(11, instagramHandleOffset);
        fbb.addOffset(12, facebookUrlOffset);
        fbb.addOffset(13, snapchatHandleOffset);
        fbb.addOffset(14, xHandleOffset);
        fbb.addOffset(15, linkedInUrlOffset);
        fbb.addOffset(16, emailsOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final birthdayValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final lastContactedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final anniversaryValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final firstNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final lastNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nicknameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final frequencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final birthdayParam =
            birthdayValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(birthdayValue);
        final lastContactedParam =
            lastContactedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastContactedValue);
        final anniversaryParam =
            anniversaryValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(anniversaryValue);
        final phoneNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final emailsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final youtubeUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final instagramHandleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final facebookUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final snapchatHandleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final xHandleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final linkedInUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final object = Contact(
          id: idParam,
          firstName: firstNameParam,
          lastName: lastNameParam,
          nickname: nicknameParam,
          frequency: frequencyParam,
          birthday: birthdayParam,
          lastContacted: lastContactedParam,
          anniversary: anniversaryParam,
          phoneNumber: phoneNumberParam,
          emails: emailsParam,
          notes: notesParam,
          youtubeUrl: youtubeUrlParam,
          instagramHandle: instagramHandleParam,
          facebookUrl: facebookUrlParam,
          snapchatHandle: snapchatHandleParam,
          xHandle: xHandleParam,
          linkedInUrl: linkedInUrlParam,
        );

        return object;
      },
    ),
    Notification: obx_int.EntityDefinition<Notification>(
      model: _entities[1],
      toOneRelations: (Notification object) => [],
      toManyRelations: (Notification object) => {},
      getId: (Notification object) => object.id,
      setId: (Notification object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field Notification.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (Notification object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final bodyOffset = fbb.writeString(object.body);
        final payloadOffset =
            object.payload == null ? null : fbb.writeString(object.payload!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, bodyOffset);
        fbb.addOffset(3, payloadOffset);
        fbb.addInt64(4, object.scheduledTime?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final scheduledTimeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final bodyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final payloadParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final scheduledTimeParam =
            scheduledTimeValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(scheduledTimeValue);
        final object = Notification(
          id: idParam,
          title: titleParam,
          body: bodyParam,
          payload: payloadParam,
          scheduledTime: scheduledTimeParam,
        );

        return object;
      },
    ),
    UserSettings: obx_int.EntityDefinition<UserSettings>(
      model: _entities[2],
      toOneRelations: (UserSettings object) => [],
      toManyRelations: (UserSettings object) => {},
      getId: (UserSettings object) => object.id,
      setId: (UserSettings object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field UserSettings.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (UserSettings object, fb.Builder fbb) {
        final defaultFrequencyOffset = fbb.writeString(object.defaultFrequency);
        fbb.startTable(7);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addBool(1, object.remindersEnabled);
        fbb.addBool(2, object.alertsEnabled);
        fbb.addInt64(3, object.notificationHour);
        fbb.addInt64(4, object.notificationMinute);
        fbb.addOffset(5, defaultFrequencyOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final remindersEnabledParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          6,
          false,
        );
        final alertsEnabledParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final notificationHourParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final notificationMinuteParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final defaultFrequencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final object = UserSettings(
          id: idParam,
          remindersEnabled: remindersEnabledParam,
          alertsEnabled: alertsEnabledParam,
          notificationHour: notificationHourParam,
          notificationMinute: notificationMinuteParam,
          defaultFrequency: defaultFrequencyParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id = obx.QueryIntegerProperty<Contact>(
    _entities[0].properties[0],
  );

  /// See [Contact.firstName].
  static final firstName = obx.QueryStringProperty<Contact>(
    _entities[0].properties[1],
  );

  /// See [Contact.lastName].
  static final lastName = obx.QueryStringProperty<Contact>(
    _entities[0].properties[2],
  );

  /// See [Contact.nickname].
  static final nickname = obx.QueryStringProperty<Contact>(
    _entities[0].properties[3],
  );

  /// See [Contact.frequency].
  static final frequency = obx.QueryStringProperty<Contact>(
    _entities[0].properties[4],
  );

  /// See [Contact.birthday].
  static final birthday = obx.QueryDateProperty<Contact>(
    _entities[0].properties[5],
  );

  /// See [Contact.lastContacted].
  static final lastContacted = obx.QueryDateProperty<Contact>(
    _entities[0].properties[6],
  );

  /// See [Contact.anniversary].
  static final anniversary = obx.QueryDateProperty<Contact>(
    _entities[0].properties[7],
  );

  /// See [Contact.phoneNumber].
  static final phoneNumber = obx.QueryStringProperty<Contact>(
    _entities[0].properties[8],
  );

  /// See [Contact.notes].
  static final notes = obx.QueryStringProperty<Contact>(
    _entities[0].properties[9],
  );

  /// See [Contact.youtubeUrl].
  static final youtubeUrl = obx.QueryStringProperty<Contact>(
    _entities[0].properties[10],
  );

  /// See [Contact.instagramHandle].
  static final instagramHandle = obx.QueryStringProperty<Contact>(
    _entities[0].properties[11],
  );

  /// See [Contact.facebookUrl].
  static final facebookUrl = obx.QueryStringProperty<Contact>(
    _entities[0].properties[12],
  );

  /// See [Contact.snapchatHandle].
  static final snapchatHandle = obx.QueryStringProperty<Contact>(
    _entities[0].properties[13],
  );

  /// See [Contact.xHandle].
  static final xHandle = obx.QueryStringProperty<Contact>(
    _entities[0].properties[14],
  );

  /// See [Contact.linkedInUrl].
  static final linkedInUrl = obx.QueryStringProperty<Contact>(
    _entities[0].properties[15],
  );

  /// See [Contact.emails].
  static final emails = obx.QueryStringVectorProperty<Contact>(
    _entities[0].properties[16],
  );
}

/// [Notification] entity fields to define ObjectBox queries.
class Notification_ {
  /// See [Notification.id].
  static final id = obx.QueryIntegerProperty<Notification>(
    _entities[1].properties[0],
  );

  /// See [Notification.title].
  static final title = obx.QueryStringProperty<Notification>(
    _entities[1].properties[1],
  );

  /// See [Notification.body].
  static final body = obx.QueryStringProperty<Notification>(
    _entities[1].properties[2],
  );

  /// See [Notification.payload].
  static final payload = obx.QueryStringProperty<Notification>(
    _entities[1].properties[3],
  );

  /// See [Notification.scheduledTime].
  static final scheduledTime = obx.QueryDateProperty<Notification>(
    _entities[1].properties[4],
  );
}

/// [UserSettings] entity fields to define ObjectBox queries.
class UserSettings_ {
  /// See [UserSettings.id].
  static final id = obx.QueryIntegerProperty<UserSettings>(
    _entities[2].properties[0],
  );

  /// See [UserSettings.remindersEnabled].
  static final remindersEnabled = obx.QueryBooleanProperty<UserSettings>(
    _entities[2].properties[1],
  );

  /// See [UserSettings.alertsEnabled].
  static final alertsEnabled = obx.QueryBooleanProperty<UserSettings>(
    _entities[2].properties[2],
  );

  /// See [UserSettings.notificationHour].
  static final notificationHour = obx.QueryIntegerProperty<UserSettings>(
    _entities[2].properties[3],
  );

  /// See [UserSettings.notificationMinute].
  static final notificationMinute = obx.QueryIntegerProperty<UserSettings>(
    _entities[2].properties[4],
  );

  /// See [UserSettings.defaultFrequency].
  static final defaultFrequency = obx.QueryStringProperty<UserSettings>(
    _entities[2].properties[5],
  );
}
